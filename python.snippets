snippet LCA [LCA]
class LCA:
    """
    最小共通祖先を求める
    G:隣接リスト
    root:根
    """

    def __init__(self, G, root):
        """
        O(nlogn)
        """
        V = len(G)
        K = 1
        while (1 << K) < V:
            K += 1
        self.parent = [[-1] * V for _ in range(K)]
        self.depth = [-1] * V
        self._dfs(G, root, -1, 0)
        for k in range(K - 1):
            for v in range(V):
                if self.parent[k][v] == -1:
                    self.parent[k + 1][v] = -1
                else:
                    self.parent[k + 1][v] = self.parent[k][self.parent[k][v]]

    def _dfs(self, G, v, p, d):
        self.parent[0][v] = p
        self.depth[v] = d
        for nv in G[v]:
            if nv == p:
                continue
            self._dfs(G, nv, v, d + 1)

    def query(self, u, v):
        """
        O(logn)
        2頂点のLCAを求める
        """
        if self.depth[u] < self.depth[v]:
            u, v = v, u
        K = len(self.parent)
        # 深さを揃える
        for k in range(K):
            if (self.depth[u] - self.depth[v]) >> k & 1:
                u = self.parent[k][u]
        if u == v:
            return u
        # 移動先が初めて一致しない時のその移動先の祖先がLCA
        for k in range(K - 1, -1, -1):
            if self.parent[k][u] != self.parent[k][v]:
                u = self.parent[k][u]
                v = self.parent[k][v]
        return self.parent[0][u]
endsnippet
snippet bellmanford [bellmanford]
def bellman_ford(s, n, edges):
    """
    単一始点最短路の長さを求める
    O(EV)
    """
    has_negative_cycle = False
    d = [float("inf")] * n
    d[s] = 0
    for i in range(n):
        update = False
        for frm, to, cost in edges:
            if d[to] > d[frm] + cost:
                d[to] = d[frm] + cost
                update = True
        if not update:
            break
        if i == n - 1:
            has_negative_cycle = True  # 頂点数と同じ数だけ辺を眺めてもまだ距離の更新が行われているので負の閉路が存在
            return d, has_negative_cycle
    return d, has_negative_cycle
endsnippet
snippet combination [combination]
class Combination:
    """
    init:O(n) ex: c = Combination()
    call:O(1) ex: c(4,2) return 4C2 = 6
    """

    def __init__(self, n_max=1000000, mod=10 ** 9 + 7):
        """
        O(n)
        """
        self.mod = mod
        self.fac = [0] * (n_max + 1)
        self.facinv = [0] * (n_max + 1)
        self.inv = [0] * (n_max + 1)
        self.fac[0] = self.fac[1] = 1
        self.facinv[0] = self.facinv[1] = 1
        self.inv[1] = 1
        for i in range(2, n_max + 1):
            self.fac[i] = self.fac[i - 1] * i % self.mod
            self.inv[i] = self.mod - self.mod // i * self.inv[self.mod % i] % self.mod
            self.facinv[i] = self.facinv[i - 1] * self.inv[i] % self.mod

    def __call__(self, n, r):
        """
        O(1)
        """
        if n < r or n < 0 or r < 0:
            return 0
        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n - r] % self.mod
endsnippet
snippet dijkstra [dijkstra]
def dijkstra(s, edges):
    """
    単一始点全点対最短路
    s: 始点
    edges: 隣接リストで(重み、頂点)のtupleを持つ
    """
    import heapq

    d = [float("inf")] * len(edges)
    d[s] = 0
    pq = [(0, s)]
    while pq:
        c, v = heapq.heappop(pq)
        if d[v] < c:
            continue
        for c2nv, nv in edges[v]:
            if c + c2nv < d[nv]:
                d[nv] = c + c2nv
                heapq.heappush(pq, (d[nv], nv))
    return d
endsnippet
snippet dijkstra_path [dijkstra_path]
def dijkstra_path(s, edges):
    """
    単一始点全点対最短路
    s: 始点
    edges: 隣接リストで(重み、頂点)のtupleを持つ
    """
    import heapq

    d = [float("inf")] * len(edges)
    prev = [-1] * len(edges)
    d[s] = 0
    pq = [(0, s)]
    while pq:
        c, v = heapq.heappop(pq)
        if d[v] < c:
            continue
        for c2nv, nv in edges[v]:
            if c + c2nv < d[nv]:
                d[nv] = c + c2nv
                prev[nv] = v
                heapq.heappush(pq, (d[nv], nv))
    return d, prev


def get_path(t, prev):
    """
    dijkstra_pathで構築したprevと終点tから始点から終点までの最短路を構築して返す
    到達可能であることが前提
    """
    path = []
    while t != -1:
        path.append(t)
        t = prev[t]
    path.reverse()
    # path = path[::-1]
    return path
endsnippet
snippet dist [dist]
def dist_from_point_to_line(x, y, x1, y1, x2, y2):
    import math

    """dist_from_point_to_line.
    ある点と他の二点を通る直線との距離を求める

    Args:
        x:
        y:
        x1:
        y1:
        x2:
        y2:
    """

    a = y2 - y1
    b = -(x2 - x1)
    c = -x1 * (y2 - y1) + y1 * (x2 - x1)
    den = math.sqrt(a ** 2 + b ** 2)
    num = abs(a * x + b * y + c)
    dist = num / den
    return dist


def dist_from_point_to_line2(x, y, x1, y1, x2, y2):
    """dist_from_point_to_line.
    ある点と他の二点を通る直線との距離を求める

    Args:
        x:
        y:
        x1:
        y1:
        x2:
        y2:
    """
    p = complex(x, y)
    p1 = complex(x1, y1)
    p2 = complex(x2, y2)
    p -= p1
    p2 -= p1
    rot_p = p2 / abs(p2)
    p /= rot_p
    return p.imag
endsnippet
snippet ext_gcd [ext_gcd]
def extgcd(a, b):
    """
    拡張ユークリッドの互除法
    ax+by=gcd(a,b)に対して(gcd,x,y)を返す
    """
    if b == 0:
        return a, 1, 0
    g, x, y = extgcd(b, a % b)
    return g, y, x - a // b * y
endsnippet
snippet fenwick_tree [fenwick_tree]
class FenwickTree:
    """
    0-indexed
    """

    def __init__(self, n):
        self.n = n
        self.data = [0] * (n + 1)

    def add(self, i, x):
        """
        0-indexed
        """
        i += 1
        while i <= self.n:
            self.data[i - 1] += x
            i += i & -i

    def sum(self, l, r):
        """
        0-indexed
        [l:r)
        """
        return self._sum(r) - self._sum(l)

    def _sum(self, i):
        """
        [0:r)
        """
        s = 0
        while i > 0:
            s += self.data[i - 1]
            i -= i & -i
        return s
endsnippet
snippet is_prime [is_prime]
def is_prime(n):
    """
    素数判定 O(√N)
    >>> is_prime(1)
    False
    >>> is_prime(2)
    True
    >>> is_prime(3)
    True
    >>> is_prime(4)
    False
    """
    i = 2
    if n <= 1:
        return False
    while i ** 2 <= n:
        if n % i == 0:
            return False
        else:
            i += 1
    return True
endsnippet
snippet prime_factorization [prime_factorization]
def prime_factorization(n):
    """
    素因数分解 O(√N)
    >>> prime_factorization(12)
    [2, 2, 3]
    >>> prime_factorization(120)
    [2, 2, 2, 3, 5]
    >>> prime_factorization(1)
    []
    >>> prime_factorization(2)
    [2]
    """

    i = 2
    ret = []
    while i * i <= n:
        while n % i == 0:
            ret.append(i)
            n //= i
        i += 1
    if n > 1:
        ret.append(n)
    return ret
endsnippet
snippet rolling_hash [rolling_hash]
class RollingHash:
    def __init__(self, s, base=1007, mod=10 ** 9 + 7):
        """
        O(len(s))
        """
        self.mod = mod
        self.pows = [1] * (len(s) + 1)
        self.hashs = [0] * (len(s) + 1)
        for i in range(len(s)):
            self.hashs[i + 1] = (self.hashs[i] * base + ord(s[i])) % mod
            self.pows[i + 1] = self.pows[i] * base % mod

    def get(self, l, r):
        """
        returns hash of s[l:r) by O(1)
        """
        return (self.hashs[r] - self.hashs[l] * self.pows[r - l]) % self.mod
endsnippet
snippet segtree [segtree]
from typing import Callable


class SegmentTree:
    def __init__(self, arr, operator: Callable, ide_ele):
        """
        arr: 元の配列
        operator: 関数
        ide_ele: 単位元
        """
        n = len(arr)
        num = 1 << (n - 1).bit_length()  # n以上の最小の2べき
        # bit_lengthの繰り上がりと最小の2べきの更新が1ずれている
        self.offset = num  # 元の0-indexedの配列とセグ木の配列(1-indexed)の葉のインデックスの差
        self.ide_ele = ide_ele
        self.operator = operator
        self.tree = [ide_ele] * (self.offset << 1)
        for i in range(n):
            self.tree[i + self.offset] = arr[i]
        # 構築
        for i in range(self.offset - 1, 0, -1):
            self.tree[i] = self.operator(self.tree[2 * i], self.tree[2 * i + 1])

    def update(self, k, x):
        """
        元の配列のindexがkの値をxに更新
        """
        k += self.offset
        self.tree[k] = x
        while k > 1:  # 親が存在するなら
            # 偶数indexが左
            if k % 2 == 1:
                self.tree[k >> 1] = self.operator(self.tree[k ^ 1], self.tree[k])
            else:
                self.tree[k >> 1] = self.operator(self.tree[k], self.tree[k ^ 1])
            k >>= 1

    def get(self, i):
        return self.tree[i + self.offset]

    def query(self, l, r):
        """
        半開区間[l,r)のoperatorによる計算結果を得る
        """
        l += self.offset
        r += self.offset
        lret = self.ide_ele
        rret = self.ide_ele
        while l < r:
            if l & 1:
                lret = self.operator(lret, self.tree[l])
                l += 1
            if r & 1:
                rret = self.operator(self.tree[r - 1], rret)
            l >>= 1  # 親の階層へ移動
            r >>= 1
        return self.operator(lret, rret)
endsnippet
snippet sieve [sieve]
class Sieve:
    def __init__(self, MAXN):
        """
        構築O(NloglogN)
        osa_k法
        """
        self.min_factor = [0] * (MAXN + 1)  # 最小の素因数を格納
        for i in range(MAXN + 1):
            self.min_factor[i] = i
        i = 2
        while i * i <= MAXN:
            if self.min_factor[i] == i:
                j = i * i
                while j <= MAXN:
                    if self.min_factor[j] > i:
                        self.min_factor[j] = i
                    j += i
            i += 1

    def is_prime(self, n) -> bool:
        """
        素数判定 O(1)
        >>> s = Sieve(100)
        >>> s.is_prime(3)
        True
        >>> s.is_prime(4)
        False
        """
        if n <= 1:
            return False
        else:
            return self.min_factor[n] == n

    def prime_factorization(self, n):
        """
        素因数分解O(logN)
        >>> s = Sieve(100)
        >>> s.prime_factorization(24)
        [2, 2, 2, 3]
        """
        res = []
        while n > 1:
            res.append(self.min_factor[n])
            n //= self.min_factor[n]
        return res


def sieve_eratosthenes(n):
    """
    >>> table = sieve_eratosthenes(6)
    >>> table
    [False, False, True, True, False, True, False]
    >>> table[2]
    True
    """
    is_prime = [True] * (n + 1)
    is_prime[0] = is_prime[1] = False
    for i in range(2, n + 1):
        for j in range(2 * i, n + 1, i):
            is_prime[j] = False
    return is_prime
endsnippet
snippet unionfind [unionfind]
class UnionFind:
    def __init__(self, size):
        self.data = [-1] * size
        self.group_num = size
        # 親はその集合の大きさx(-1)
        # 子は親のindex

    def find(self, x):
        if self.data[x] < 0:
            return x
        parent = self.find(self.data[x])
        self.data[x] = parent
        return parent

    def size(self, x):
        return -self.data[x]

    def unite(self, x, y):
        x = self.find(x)
        y = self.find(y)
        if x == y:
            return False
        # if self.data[x] > self.data[y]:
        if self.size(x) < self.size(y):
            x, y = y, x  # 集合として大きい方をx
        self.data[x] += self.data[y]
        self.data[y] = x
        self.group_num -= 1
        return True

    def same(self, x, y):
        return self.find(x) == self.find(y)

    def group_count(self):
        return self.group_num
endsnippet
snippet warshall_floyd [warshall_floyd]
def warshall_floyd(v, edges):
    """
    v: 頂点数
    edges: (s,t,d)のタプルのリスト
    全点対最短路長を求める
    O(V^3)
    """

    dist = [[float("inf")] * v for _ in range(v)]
    for i in range(v):
        dist[i][i] = 0
    for s, t, d in edges:
        dist[s][t] = d
    for k in range(v):
        for i in range(v):
            for j in range(v):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    return dist
endsnippet
